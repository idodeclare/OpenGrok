fib
refill
fib
fib
tosource
off
include-file
fib
fib
fib
fib
tosource
off
interpret
>inwas
tosource
fib
fib
included
include
[ELSE]
[IF]
[THEN]
array
parity
parity
c,
even_parity
ram
pc
rA
f_sp
f_z
f_ac
f_cy
array
reg_pair
reg_pair
rBC
reg_pair
rDE
reg_pair
rHL
reg_pair
rSP
pc!
ram
pc
pc@
pc
ram
rA!
rA
rA@
rA
8bit
0ff
16bit
0ffff
split
0ff
merge
SET_SZP
f_sp
f_z
Z
f_z
S
f_sp
P
even_parity
f_sp
AC
f_ac
CY
f_cy
nCY
f_cy
nybs
+ac
f_ac
set_f
f_sp
f_z
f_ac
f_cy
get_f
f_sp
f_z
f_ac
P
CY
ram@
ram
ram!
ram
fetch
pc
pc
ram!16
ram
ram@16
ram
merge
fetch16
pc
pc
merge
(reg8)
rBC
rBC
rDE
rDE
rHL
rHL
rA
w8
rHL
ram!
reg8
r8
rHL
ram@
reg8
(reg16)
reg_pair
r16
reg16
w16
reg16
array
dx
;op
dx
b210
b543
b210
b54
b543
_dcr
+ac
8bit
SET_SZP
_inr
+ac
8bit
SET_SZP
mk_DCR
b543
r8
_dcr
w8
mk_INR
b543
r8
_inr
w8
mk_MVI
fetch
b543
w8
mk_LXI
fetch16
b54
w16
1+/16
16bit
1-/16
16bit
mk_INX
b54
r16
1+/16
w16
mk_DCX
b54
r16
1-/16
w16
_dad
rHL
16bit
rHL
f_cy
mk_DAD
b54
r16
_dad
mk_MOV
b210
r8
b543
w8
_push
rSp
rSP
ram!16
_pop
rSP
ram@16
rSP
mk_POP
b54
_pop
w16
mk_PUSH
b54
r16
_push
_jsr
pc@
_push
pc!
_call
fetch16
pc@
_push
pc!
_ret
_pop
pc!
_jmp
fetch16
pc!
_skip
pc
cond
b54
Z
CY
P
S
compile,
compile,
mk_CC
_skip
_call
cond
mk_RC
noop
_ret
cond
mk_JC
_skip
_jmp
cond
mk_RST
b543
_jsr
aresult
split
f_cy
rA!
SET_SZP
lresult
f_cy
rA!
SET_SZP
_add
rA@
nybs
+ac
aresult
_adc
rA@
nybs
CY
+ac
CY
aresult
_sub
rA@
nybs
+ac
aresult
_sbb
rA@
nybs
nCY
+ac
nCY
aresult
_ana
rA@
f_ac
lresult
_xra
f_ac
rA@
lresult
_ora
f_ac
rA@
lresult
_cmp
rA@
nybs
+ac
split
f_cy
SET_SZP
array
aluops
_add
_adc
_sub
_sbb
_ana
_xra
_ora
_cmp
mk_ALU
b543
aluops
compile,
mk_LXI
mk_INX
mk_INR
mk_DCR
mk_MVI
mk_DAD
mk_DCX
mk_INR
mk_DCR
mk_MVI
;op
mk_MOV
;op
b210
r8
mk_ALU
;op
mk_RC
mk_POP
mk_JC
mk_CC
mk_PUSH
fetch
mk_ALU
mk_RST
mk_RC
mk_JC
mk_CC
fetch
mk_ALU
mk_RST
;op
aa
rA@
merge
alo
rA@
ahi
rA@
alo
>
AC
alo
>
f_ac
ahi
CY
AC
>
CY
ahi
AC
>
CY
f_cy
rA@
8bit
rA!
SET_SZP
;op
rA@
rBC
ram!
;op
aa
f_cy
rA!
;op
aa
f_cy
rA!
;op
rBC
ram@
rA!
;op
rA@
rDE
ram!
;op
rA@
CY
split
f_cy
rA!
;op
rDE
ram@
rA!
;op
rA@
CY
merge
f_cy
rA!
;op
rHL
fetch16
ram!16
;op
fetch16
ram@16
rHL
;op
rA@
rA!
;op
rA@
fetch16
ram!
;op
f_cy
;op
fetch16
ram@
rA!
;op
CY
f_cy
;op
_jmp
dx
_ret
dx
_call
dx
rHL
_pop
rHL
_push
;op
rHL
pc!
;op
rHL
rDE
rHL
rDE
;op
_pop
split
rA!
set_f
;op
;op
get_f
rA@
merge
_push
;op
rHL
rSP
;op
;op
rBC
rDE
ram@
$
;op
;op
pc!
lresult
f_ac
rBC
dx
fetch
